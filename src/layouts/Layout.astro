---
interface Props {
	title: string;
	hideHeader: boolean;
	hideFooter?: boolean;
}

const { title, hideHeader, hideFooter = false } = Astro.props;
//import '@fontsource/creepster';
//import '@fontsource-variable/roboto-slab';
import '@fontsource/eagle-lake';
import '@fontsource-variable/comfortaa';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Analytics from '@vercel/analytics/astro';
import '../styles/animations.css';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<meta
			name="description"
			content="Discover unique and fun gifts at Variety Gifts Unlimited. From savings boxes to giant Snorlax plushies, we have something for everyone!"
		/>
		<meta
			name="keywords"
			content="gifts, unique gifts, fun gifts, savings box, dog toy, Snorlax plushie"
		/>
		<meta name="author" content="Variety Gifts Unlimited" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta
			property="og:url"
			content="https://www.varietygiftsunlimited.com/"
		/>
		<meta
			property="og:title"
			content="Fun gifts for you and your loved ones ðŸ˜„"
		/>
		<meta
			property="og:description"
			content="Discover unique and fun gifts at Variety Gifts Unlimited. From savings boxes to giant Snorlax plushies, we have something for everyone!"
		/>
		<meta
			property="og:image"
			content="https://www.varietygiftsunlimited.com/logos/bg-min.png"
		/>

		<!-- Microsoft Teams App Sharing -->
		<meta name="msapplication-TileColor" content="#da532c" />
		<meta name="msapplication-TileImage" content="/mstile-144x144.png" />
		<meta
			name="msapplication-square70x70logo"
			content="/mstile-70x70.png"
		/>
		<meta
			name="msapplication-square150x150logo"
			content="/mstile-150x150.png"
		/>
		<meta
			name="msapplication-wide310x150logo"
			content="/mstile-310x150.png"
		/>
		<meta
			name="msapplication-square310x310logo"
			content="/mstile-310x310.png"
		/>

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta
			property="twitter:url"
			content="https://www.varietygiftsunlimited.com/"
		/>
		<meta
			property="twitter:title"
			content="Variety Gifts Unlimited - Unique and Fun Gifts"
		/>
		<meta
			property="twitter:description"
			content="Discover unique and fun gifts at Variety Gifts Unlimited. From savings boxes to giant Snorlax plushies, we have something for everyone!"
		/>
		<meta
			property="twitter:image"
			content="https://www.varietygiftsunlimited.com/logos/new_logo.jpg"
		/>

		<link rel="canonical" href="https://www.varietygiftsunlimited.com/" />
		<script is:inline>
			const isDark = JSON.parse(localStorage.getItem('isDark') ?? 'true');
			document.documentElement.setAttribute('data-theme', isDark ? 'leaf-blue' : 'light');
		</script>
	</head>

	<body>
		<div class="min-h-screen bg-gradient-radial from-[#f0dafd] to-[#f9dcfe]">
			{ !hideHeader && <Header /> }
			<slot />
		</div>
		{ !hideFooter && <Footer /> }
		<script>
			// Scroll reveal functionality
			const observerOptions = {
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.classList.add('revealed');
						// Optional: stop observing after reveal
						observer.unobserve(entry.target);
					}
				});
			}, observerOptions);

			// Observe all elements with scroll-reveal class
			document.addEventListener('DOMContentLoaded', () => {
				const elements = document.querySelectorAll('.scroll-reveal');
				elements.forEach(el => observer.observe(el));
			});

			// Smooth parallax scrolling
			let ticking = false;
			function updateParallax() {
				const scrolled = window.pageYOffset;
				const parallaxElements = document.querySelectorAll('.parallax-element');
				
				parallaxElements.forEach(element => {
					const el = element as HTMLElement;
					const speed = parseFloat(el.dataset.speed || '0.5');
					const yPos = -(scrolled * speed);
					el.style.transform = `translateY(${yPos}px)`;
				});
				
				ticking = false;
			}

			function requestTick() {
				if (!ticking) {
					window.requestAnimationFrame(updateParallax);
					ticking = true;
				}
			}

			window.addEventListener('scroll', requestTick);
		</script>
	</body>
	<Analytics />
</html>


<style is:global>
	html,
	body {
		overflow-y: auto;
		min-width: 100%;
		min-height: fit-content;
		margin: 0;
		padding: 0;
		font-family: system-ui, sans-serif;
	}
	h1, h2, h3, h4, h5, h6 {
		font-family: 'Comfortaa Variable', sans-serif;
		font-weight: bold;
	}

	dialog {
		padding: 1rem;
		background: white;
		color: black;
		border: 1px solid var(--border-color);
		border-radius: 0.5rem;
		max-width: 400px;
	}

	dialog::backdrop {
		background: rgba(0, 0, 0, 0.5);
	}

	dialog button {
		margin: 0.5rem;
		padding: 0.5rem 1rem;
		border: none;
		border-radius: 0.25rem;
		background: var(--button-bg);
		color: var(--button-text);
		cursor: pointer;
	}

	dialog button:hover {
		opacity: 0.8;
	}
</style>
