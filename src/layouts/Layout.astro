---
interface Props {
	title: string;
	hideHeader: boolean;
	hideFooter?: boolean;
	description?: string;
	ogTitle?: string;
	ogDescription?: string;
	ogImage?: string;
	ogUrl?: string;
}

const { 
	title, 
	hideHeader, 
	hideFooter = false,
	description = "Discover unique and fun gifts at Variety Gifts Unlimited. From savings boxes to giant Snorlax plushies, we have something for everyone!",
	ogTitle,
	ogDescription,
	ogImage,
	ogUrl
} = Astro.props;
//import '@fontsource/creepster';
//import '@fontsource-variable/roboto-slab';
import '@fontsource/eagle-lake';
import '@fontsource-variable/comfortaa';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Analytics from '@vercel/analytics/astro';
import { activeTheme, themeClasses } from "../config/theme";
import '../styles/animations.css';
import '../styles/themes.css';

const themeClass = themeClasses[activeTheme];
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<meta
			name="description"
			content={description}
		/>
		<meta
			name="keywords"
			content="gifts, unique gifts, fun gifts, savings box, dog toy, Snorlax plushie"
		/>
		<meta name="author" content="Variety Gifts Unlimited" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta
			property="og:url"
			content={ogUrl || "https://www.variety.gifts/"}
		/>
		<meta
			property="og:title"
			content={ogTitle || "Fun gifts for you and your loved ones ðŸ˜„"}
		/>
		<meta
			property="og:description"
			content={ogDescription || description}
		/>
		<meta
			property="og:image"
			content={ogImage || "https://www.variety.gifts/logos/bg-min.png"}
		/>

		<!-- Microsoft Teams App Sharing -->
		<meta name="msapplication-TileColor" content="#da532c" />
		<meta name="msapplication-TileImage" content="/mstile-144x144.png" />
		<meta
			name="msapplication-square70x70logo"
			content="/mstile-70x70.png"
		/>
		<meta
			name="msapplication-square150x150logo"
			content="/mstile-150x150.png"
		/>
		<meta
			name="msapplication-wide310x150logo"
			content="/mstile-310x150.png"
		/>
		<meta
			name="msapplication-square310x310logo"
			content="/mstile-310x310.png"
		/>

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta
			property="twitter:url"
			content={ogUrl || "https://www.variety.gifts/"}
		/>
		<meta
			property="twitter:title"
			content={ogTitle || "Variety Gifts Unlimited - Unique and Fun Gifts"}
		/>
		<meta
			property="twitter:description"
			content={ogDescription || description}
		/>
		<meta
			property="twitter:image"
			content={ogImage || "https://www.variety.gifts/logos/new_logo.jpg"}
		/>

		<link rel="canonical" href={ogUrl || "https://www.variety.gifts/"} />

		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Bodoni+Moda:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900&display=swap" rel="stylesheet">

		<slot name="head" />
		
		<script is:inline>
			const isDark = JSON.parse(localStorage.getItem('isDark') ?? 'true');
			document.documentElement.setAttribute('data-theme', isDark ? 'leaf-blue' : 'light');
		</script>
	</head>

 	<body class={themeClass}>
 		<div class="min-h-screen bg-theme-mist">
			{ !hideHeader && <Header /> }
			<main class={!hideHeader ? 'pt-16' : ''}>
				<slot />
			</main>
		</div>
		{ !hideFooter && <Footer /> }
		<script>
			// Scroll reveal functionality
			const observerOptions = {
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.classList.add('revealed');
						// Optional: stop observing after reveal
						observer.unobserve(entry.target);
					}
				});
			}, observerOptions);

			// Observe all elements with scroll-reveal class
			document.addEventListener('DOMContentLoaded', () => {
				const elements = document.querySelectorAll('.scroll-reveal');
				elements.forEach(el => observer.observe(el));
			});

			// Smooth parallax scrolling
			let ticking = false;
			function updateParallax() {
				const scrolled = window.pageYOffset;
				const parallaxElements = document.querySelectorAll('.parallax-element');
				
				parallaxElements.forEach(element => {
					const el = element as HTMLElement;
					const speed = parseFloat(el.dataset.speed || '0.5');
					const yPos = -(scrolled * speed);
					el.style.transform = `translateY(${yPos}px)`;
				});
				
				ticking = false;
			}

			function requestTick() {
				if (!ticking) {
					window.requestAnimationFrame(updateParallax);
					ticking = true;
				}
			}

		window.addEventListener('scroll', requestTick);
		
 		// Force scrollbar styling with exact fall theme colors
 		document.addEventListener('DOMContentLoaded', () => {
 			// Use exact fall theme colors to override any purple
 			const fallAccent = '#ea580c'; // Fall orange
 			const fallSurface = '#fff7ed'; // Fall surface
 			const fallAccentStrong = '#b45309'; // Fall orange dark

 			// Apply directly with exact colors
 			document.documentElement.style.setProperty('scrollbar-width', 'thin', 'important');
 			document.documentElement.style.setProperty('scrollbar-color', `${fallAccent} ${fallSurface}`, 'important');
 			document.body.style.setProperty('scrollbar-width', 'thin', 'important');
 			document.body.style.setProperty('scrollbar-color', `${fallAccent} ${fallSurface}`, 'important');

 			// Create aggressive override style
 			const style = document.createElement('style');
 			style.textContent = `
 				/* Aggressive scrollbar override - kill all purple */
 				html, body, *, :root {
 					scrollbar-width: thin !important;
 					scrollbar-color: ${fallAccent} ${fallSurface} !important;
 				}
 				/* WebKit scrollbars with exact colors */
 				html::-webkit-scrollbar, body::-webkit-scrollbar, *::-webkit-scrollbar {
 					width: 12px !important;
 					height: 12px !important;
 				}
 				html::-webkit-scrollbar-track, body::-webkit-scrollbar-track, *::-webkit-scrollbar-track {
 					background: ${fallSurface} !important;
 				}
 				html::-webkit-scrollbar-thumb, body::-webkit-scrollbar-thumb, *::-webkit-scrollbar-thumb {
 					background: ${fallAccent} !important;
 					border-radius: 6px !important;
 					border: 2px solid ${fallSurface} !important;
 				}
 				html::-webkit-scrollbar-thumb:hover, body::-webkit-scrollbar-thumb:hover, *::-webkit-scrollbar-thumb:hover {
 					background: ${fallAccentStrong} !important;
 				}
 				/* Kill any purple scrollbar colors */
 				html::-webkit-scrollbar-thumb:not(:hover) {
 					background: ${fallAccent} !important;
 				}
 				/* iOS overscroll bounce area */
 				html, body {
 					background: ${fallSurface} !important;
 				}
 			`;
 			style.setAttribute('data-scrollbar-override', 'true');
 			document.head.appendChild(style);
 		});
		</script>
	</body>
	<Analytics />
</html>


<style is:global>
	/* Firefox scrollbar styling - highest priority */
 	html {
 		scrollbar-width: thin !important;
 		scrollbar-color: var(--season-accent) var(--season-surface) !important;
 	}

 	body {
 		scrollbar-width: thin !important;
 		scrollbar-color: var(--season-accent) var(--season-surface) !important;
 	}

 	/* Force Firefox scrollbar on all elements */
 	* {
 		scrollbar-width: thin !important;
 		scrollbar-color: var(--season-accent) var(--season-surface) !important;
 	}

	html,
	body {
		overflow-y: auto;
		min-width: 100%;
		min-height: fit-content;
		margin: 0;
		padding: 0;
		font-family: system-ui, sans-serif;
	}
	h1, h2, h3, h4, h5, h6 {
		font-family: var(--season-display-font);
		font-weight: 900;
	}

	dialog {
		padding: 1rem;
		background: white;
		color: black;
		border: 1px solid var(--border-color);
		border-radius: 0.5rem;
		max-width: 400px;
	}

	dialog::backdrop {
		background: rgba(0, 0, 0, 0.5);
	}

	dialog button {
		margin: 0.5rem;
		padding: 0.5rem 1rem;
		border: none;
		border-radius: 0.25rem;
		background: var(--button-bg);
		color: var(--button-text);
		cursor: pointer;
	}

	dialog button:hover {
		opacity: 0.8;
	}
</style>
