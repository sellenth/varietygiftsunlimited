---
import ImageCarousel from './ImageCarousel.astro';

const { title, description, priceIds, singlePrice, singlePriceId, images, colorImages } = Astro.props;
const availableSizes = priceIds ? Object.keys(priceIds) : [];
const defaultSize = availableSizes.length > 0 ? availableSizes[0] : null;

// Check if this is a color/size variant product (Cool Aunts Club)
const isColorSizeVariant = availableSizes.some(size => size.includes(' - '));
const colorOptions = isColorSizeVariant ? [...new Set(availableSizes.map(s => s.split(' - ')[0]))] : [];
const sizeOptions = isColorSizeVariant ? [...new Set(availableSizes.map(s => s.split(' - ')[1]))] : availableSizes;

// Get the API key from environment variables
const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
---

<div class="max-w-4xl mx-auto px-4">
    <a href="/shop" class="inline-block py-4 text-gray-600 hover:text-gray-900 transition-colors">
        <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
        </span>
    </a>
</div>
<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid md:grid-cols-2 gap-8">
        <ImageCarousel images={images} title={title} />
        <div class="flex flex-col gap-4">
            <h1 class="text-3xl font-bold">{title}</h1>
            <p class="text-gray-600">{description}</p>

            {priceIds ? (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{title.includes('Cool Aunts') ? '$29.99' : '$19.99'} w/ free shipping!</p>
                    {isColorSizeVariant ? (
                        <>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Color:
                                </label>
                                <div class="flex gap-3">
                                    {colorOptions.map((color, index) => {
                                        const colorClasses = {
                                            'Green': 'bg-green-600',
                                            'Pink': 'bg-pink-400',
                                            'Natural': 'bg-yellow-100',
                                            'Yellow': 'bg-yellow-400'
                                        };
                                        return (
                                            <button
                                                type="button"
                                                data-color={color}
                                                class={`color-orb w-12 h-12 rounded-full border-2 transition-all duration-200 hover:scale-110 hover:shadow-lg ${colorClasses[color]} ${index === 0 ? 'border-gray-800 ring-2 ring-offset-2 ring-gray-800' : 'border-gray-300'}`}
                                                title={color}
                                                aria-label={`Select ${color} color`}
                                            >
                                                <span class="sr-only">{color}</span>
                                            </button>
                                        );
                                    })}
                                </div>
                                <input type="hidden" id="color-select" name="color" value={colorOptions[0]} />
                            </div>
                            <div>
                                <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Size:
                                </label>
                                <select 
                                    id="size-select" 
                                    name="size" 
                                    class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    {sizeOptions.map((size) => (
                                        <option value={size}>{size}</option>
                                    ))}
                                </select>
                            </div>
                        </>
                    ) : (
                        <div>
                            <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                Select Size:
                            </label>
                            <select 
                                id="size-select" 
                                name="size" 
                                class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            >
                                {availableSizes.map((size) => (
                                    <option value={priceIds[size]} selected={size === defaultSize}>{size}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={priceIds[defaultSize]}
                        data-is-color-size={isColorSizeVariant}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            ) : (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">${singlePrice} w/ free shipping!</p>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={singlePriceId}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            )}
        </div>
    </div>
</div>


<script>
    import { loadStripe } from "@stripe/stripe-js";

    const buyButton = document.getElementById("buy-button");
    const sizeSelect = document.getElementById("size-select") as HTMLSelectElement;
    const colorSelect = document.getElementById("color-select") as HTMLInputElement;
    const isColorSize = buyButton?.dataset?.isColorSize === "true";
    
    /*
    if (!buyButton?.dataset?.stripeKey || !buyButton?.dataset?.stripePaymentId) {
        console.error("Missing required Stripe configuration");
        throw new Error("Missing required Stripe configuration");
    }

    const stripeKey = buyButton.dataset.stripeKey;
    const stripe = await loadStripe(stripeKey);

    if (!stripe) {
        console.error("Failed to initialize Stripe.");
        throw new Error("Failed to initialize Stripe.");
    }*/

    // For color/size variants, find the price ID based on selection
    const getPriceId = () => {
        if (isColorSize && colorSelect && sizeSelect) {
            const color = colorSelect.value;
            const size = sizeSelect.value;
            const key = `${color} - ${size}`;
            // Get price IDs from the page's script data
            const priceData = (window as any).priceIds || {};
            return priceData[key] || buyButton.dataset.stripePaymentId;
        }
        return sizeSelect ? sizeSelect.value : buyButton.dataset.stripePaymentId;
    };

    // Initialize carousel functionality
    function initializeCarousel() {
        const carousel = document.querySelector('.carousel');
        const items = carousel?.querySelectorAll('.carousel-item');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        if (carousel && items && prevBtn && nextBtn && items.length > 0) {
            let currentIndex = 1;
            const maxIndex = items.length;

            // Hide navigation buttons if there's only one image
            if (maxIndex <= 1) {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            } else {
                prevBtn.style.display = 'block';
                nextBtn.style.display = 'block';
            }

            function showImage(index: number) {
                items.forEach((item) => {
                    item.classList.add('hidden');
                });
                const targetItem = carousel.querySelector(`[data-index="${index}"]`);
                if (targetItem) {
                    targetItem.classList.remove('hidden');
                }
            }

            function nextImage() {
                currentIndex = currentIndex === maxIndex ? 1 : currentIndex + 1;
                showImage(currentIndex);
            }

            function prevImage() {
                currentIndex = currentIndex === 1 ? maxIndex : currentIndex - 1;
                showImage(currentIndex);
            }

            // Remove existing event listeners by cloning buttons
            const newPrevBtn = prevBtn.cloneNode(true);
            const newNextBtn = nextBtn.cloneNode(true);
            prevBtn.parentNode?.replaceChild(newPrevBtn, prevBtn);
            nextBtn.parentNode?.replaceChild(newNextBtn, nextBtn);

            // Add click event listeners to the new buttons
            newNextBtn.addEventListener('click', (e) => {
                e.preventDefault();
                nextImage();
            });
            
            newPrevBtn.addEventListener('click', (e) => {
                e.preventDefault();
                prevImage();
            });
        }
    }

    // Handle color orb clicks
    function setupColorImageSwitching() {
        const colorOrbs = document.querySelectorAll('.color-orb');
        const hiddenColorInput = document.getElementById("color-select") as HTMLInputElement;
        
        if (colorOrbs && (window as any).colorImages) {
            colorOrbs.forEach(orb => {
                orb.addEventListener('click', () => {
                    const selectedColor = orb.getAttribute('data-color');
                    
                    if (selectedColor) {
                        // Update hidden input
                        if (hiddenColorInput) {
                            hiddenColorInput.value = selectedColor;
                        }
                        
                        // Update visual selection state
                        colorOrbs.forEach(otherOrb => {
                            otherOrb.classList.remove('border-gray-800', 'ring-2', 'ring-offset-2', 'ring-gray-800');
                            otherOrb.classList.add('border-gray-300');
                        });
                        orb.classList.remove('border-gray-300');
                        orb.classList.add('border-gray-800', 'ring-2', 'ring-offset-2', 'ring-gray-800');
                        
                        // Update images
                        const colorImagesData = (window as any).colorImages[selectedColor];
                        
                        if (colorImagesData) {
                            const carousel = document.querySelector('.carousel');
                            const existingImages = carousel?.querySelectorAll('.carousel-item');
                            
                            if (carousel && existingImages) {
                                // Remove existing images
                                existingImages.forEach(img => img.remove());
                                
                                // Add new images for the selected color
                                colorImagesData.forEach((image: any, index: number) => {
                                    const img = document.createElement('img');
                                    img.src = image.src;
                                    img.alt = image.alt;
                                    img.loading = index === 0 ? "eager" : "lazy";
                                    img.className = `w-full h-full object-cover carousel-item select-none ${index === 0 ? '' : 'hidden'}`;
                                    img.setAttribute('data-index', (index + 1).toString());
                                    carousel.appendChild(img);
                                });
                                
                                // Reset carousel to first image
                                const firstImage = carousel.querySelector('[data-index="1"]');
                                if (firstImage) {
                                    carousel.querySelectorAll('.carousel-item').forEach(item => {
                                        item.classList.add('hidden');
                                    });
                                    firstImage.classList.remove('hidden');
                                }
                                
                                // Reinitialize carousel functionality
                                initializeCarousel();
                            }
                        }
                    }
                });
            });
        }
    }

    // Setup color switching and carousel after DOM is loaded
    function initializePage() {
        initializeCarousel();
        setupColorImageSwitching();
    }
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializePage);
    } else {
        initializePage();
    }

    /*
    buyButton.addEventListener("click", () => {
        const priceId = getPriceId();

        stripe.redirectToCheckout({
            lineItems: [{ price: priceId, quantity: 1 }],
            mode: "payment",
            successUrl: "https://varietygiftsunlimited.com/success",
            cancelUrl: "https://varietygiftsunlimited.com/",
            shippingAddressCollection: {
                allowedCountries: ["US", "CA", "MX", "TH"],
            },
        })
        .then(function (result) {
            if (result.error) {
                alert(result.error.message);
            }
        });
    });
    */
</script> 