---
import ImageCarousel from './ImageCarousel.astro';

const { title, description, priceIds, singlePrice, singlePriceId, images } = Astro.props;
const availableSizes = priceIds ? Object.keys(priceIds) : [];
const defaultSize = availableSizes.length > 0 ? availableSizes[0] : null;

// Check if this is a color/size variant product (Cool Aunts Club)
const isColorSizeVariant = availableSizes.some(size => size.includes(' - '));
const colorOptions = isColorSizeVariant ? [...new Set(availableSizes.map(s => s.split(' - ')[0]))] : [];
const sizeOptions = isColorSizeVariant ? [...new Set(availableSizes.map(s => s.split(' - ')[1]))] : availableSizes;

// Get the API key from environment variables
const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
---

<div class="max-w-4xl mx-auto px-4">
    <a href="/shop" class="inline-block py-4 text-gray-600 hover:text-gray-900 transition-colors">
        <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
        </span>
    </a>
</div>
<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid md:grid-cols-2 gap-8">
        <ImageCarousel images={images} title={title} />
        <div class="flex flex-col gap-4">
            <h1 class="text-3xl font-bold">{title}</h1>
            <p class="text-gray-600">{description}</p>

            {priceIds ? (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{title.includes('Cool Aunts') ? '$29.99' : '$19.99'} w/ free shipping!</p>
                    {isColorSizeVariant ? (
                        <>
                            <div>
                                <label for="color-select" class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Color:
                                </label>
                                <select 
                                    id="color-select" 
                                    name="color" 
                                    class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    {colorOptions.map((color) => (
                                        <option value={color}>{color}</option>
                                    ))}
                                </select>
                            </div>
                            <div>
                                <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Size:
                                </label>
                                <select 
                                    id="size-select" 
                                    name="size" 
                                    class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    {sizeOptions.map((size) => (
                                        <option value={size}>{size}</option>
                                    ))}
                                </select>
                            </div>
                        </>
                    ) : (
                        <div>
                            <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                Select Size:
                            </label>
                            <select 
                                id="size-select" 
                                name="size" 
                                class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            >
                                {availableSizes.map((size) => (
                                    <option value={priceIds[size]} selected={size === defaultSize}>{size}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={priceIds[defaultSize]}
                        data-is-color-size={isColorSizeVariant}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            ) : (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">${singlePrice} w/ free shipping!</p>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={singlePriceId}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            )}
        </div>
    </div>
</div>

<script>
    import { loadStripe } from "@stripe/stripe-js";

    const buyButton = document.getElementById("buy-button");
    const sizeSelect = document.getElementById("size-select") as HTMLSelectElement;
    const colorSelect = document.getElementById("color-select") as HTMLSelectElement;
    const isColorSize = buyButton?.dataset?.isColorSize === "true";
    
    if (!buyButton?.dataset?.stripeKey || !buyButton?.dataset?.stripePaymentId) {
        console.error("Missing required Stripe configuration");
        throw new Error("Missing required Stripe configuration");
    }

    const stripeKey = buyButton.dataset.stripeKey;
    const stripe = await loadStripe(stripeKey);

    if (!stripe) {
        console.error("Failed to initialize Stripe.");
        throw new Error("Failed to initialize Stripe.");
    }

    // For color/size variants, find the price ID based on selection
    const getPriceId = () => {
        if (isColorSize && colorSelect && sizeSelect) {
            const color = colorSelect.value;
            const size = sizeSelect.value;
            const key = `${color} - ${size}`;
            // Get price IDs from the page's script data
            const priceData = (window as any).priceIds || {};
            return priceData[key] || buyButton.dataset.stripePaymentId;
        }
        return sizeSelect ? sizeSelect.value : buyButton.dataset.stripePaymentId;
    };

    buyButton.addEventListener("click", () => {
        const priceId = getPriceId();

        stripe.redirectToCheckout({
            lineItems: [{ price: priceId, quantity: 1 }],
            mode: "payment",
            successUrl: "https://varietygiftsunlimited.com/success",
            cancelUrl: "https://varietygiftsunlimited.com/",
            shippingAddressCollection: {
                allowedCountries: ["US", "CA", "MX", "TH"],
            },
        })
        .then(function (result) {
            if (result.error) {
                alert(result.error.message);
            }
        });
    });
</script> 