---
const { title, description, priceIds, singlePrice, singlePriceId, image } = Astro.props;
const availableSizes = priceIds ? Object.keys(priceIds) : [];
const defaultSize = availableSizes.length > 0 ? availableSizes[0] : null;

// Get the API key from environment variables
const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
---

<div class="max-w-4xl mx-auto px-4">
    <a href="/shop" class="inline-block py-4 text-gray-600 hover:text-gray-900 transition-colors">
        <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
        </span>
    </a>
</div>
<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid md:grid-cols-2 gap-8">
        <div class="aspect-square overflow-hidden rounded-lg">
            <img src={image} alt={title} class="w-full h-full object-cover">
        </div>
        <div class="flex flex-col gap-4">
            <h1 class="text-3xl font-bold">{title}</h1>
            <p class="text-gray-600">{description}</p>

            {priceIds ? (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">$19.99</p>
                    <div>
                        <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                            Select Size:
                        </label>
                        <select 
                            id="size-select" 
                            name="size" 
                            class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                        >
                            {availableSizes.map((size) => (
                                <option value={priceIds[size]} selected={size === defaultSize}>{size}</option>
                            ))}
                        </select>
                    </div>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={priceIds[defaultSize]}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            ) : (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">${singlePrice}</p>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={singlePriceId}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            )}
        </div>
    </div>
</div>

<script>
    import { loadStripe } from "@stripe/stripe-js";

    const buyButton = document.getElementById("buy-button");
    const sizeSelect = document.getElementById("size-select") as HTMLSelectElement;
    
    if (!buyButton?.dataset?.stripeKey || !buyButton?.dataset?.stripePaymentId) {
        console.error("Missing required Stripe configuration");
        throw new Error("Missing required Stripe configuration");
    }

    const stripeKey = buyButton.dataset.stripeKey;
    const stripe = await loadStripe(stripeKey);

    if (!stripe) {
        console.error("Failed to initialize Stripe.");
        throw new Error("Failed to initialize Stripe.");
    }

    buyButton.addEventListener("click", () => {
        // If we have a size selector, use its value, otherwise use the default payment ID
        const priceId = sizeSelect ? sizeSelect.value : buyButton.dataset.stripePaymentId;

        stripe.redirectToCheckout({
            lineItems: [{ price: priceId, quantity: 1 }],
            mode: "payment",
            successUrl: "https://varietygiftsunlimited.com/success",
            cancelUrl: "https://varietygiftsunlimited.com/",
            shippingAddressCollection: {
                allowedCountries: ["US", "CA", "MX", "TH"],
            },
        })
        .then(function (result) {
            if (result.error) {
                alert(result.error.message);
            }
        });
    });
</script> 