---
import ImageCarousel from './ImageCarousel.astro';

const { title, description, priceIds, singlePrice, singlePriceId, images, colorImages, price } = Astro.props;
const availableSizes = priceIds ? Object.keys(priceIds) : [];
const defaultSize = availableSizes.length > 0 ? availableSizes[0] : null;

// Check if this is a color/size variant product (has colorImages defined)
const isColorSizeVariant = colorImages && Object.keys(colorImages).length > 0;
const colorOptions = isColorSizeVariant ? Object.keys(colorImages) : [];
const sizeOptions = isColorSizeVariant ? [...new Set(availableSizes.map(s => s.split(' - ')[1]))] : availableSizes;

// Use first color's images as default if color variants exist
const displayImages = isColorSizeVariant && colorOptions.length > 0 ? colorImages[colorOptions[0]] : images;

// Get the API key from environment variables
const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
---

<div class="max-w-6xl mx-auto px-4 py-8">
    <button onclick="history.back()" class="inline-block mb-6 text-gray-600 hover:text-gray-900 transition-colors">
        <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
        </span>
    </button>
    <div class="grid md:grid-cols-2 gap-8">
        <ImageCarousel images={displayImages} title={title} />
        <div class="flex flex-col gap-4">
            <h1 class="text-3xl font-bold">{title}</h1>
            <p class="text-gray-600">{description}</p>

            {priceIds ? (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{price || '$19.99'} w/ free shipping!</p>
                    {isColorSizeVariant ? (
                        <>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-3">
                                    Select Color:
                                </label>
                                <div class="flex gap-3 flex-wrap">
                                    {colorOptions.map((color, index) => {
                                        const colorMap = {
                                            'Green': '#22c55e',
                                            'Pink': '#ec4899',
                                            'Natural': '#f5f5dc',
                                            'Yellow': '#fbbf24',
                                            'Blue': '#3b82f6',
                                            'Purple': '#a855f7',
                                            'Red': '#ef4444',
                                            'Black': '#000000',
                                            'White': '#ffffff',
                                            'Gray': '#6b7280',
                                            'Grey': '#6b7280',
                                            'Brown': '#8b4513',
                                            'Tan': '#d2b48c',
                                            'Olive': '#6b8e23',
                                            'Orange': '#f97316'
                                        };
                                        const bgColor = colorMap[color] || '#e5e7eb';
                                        const isLight = color === 'Natural' || color === 'White' || color === 'Yellow' || color === 'Tan';
                                        return (
                                            <button
                                                type="button"
                                                data-color={color}
                                                class={`color-orb ${index === 0 ? 'active' : ''}`}
                                                style={`background-color: ${bgColor};`}
                                                aria-label={`Select ${color} color`}
                                            >
                                                <span class="color-name">{color}</span>
                                                {isLight && <span class="orb-border"></span>}
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>
                            <div>
                                <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Size:
                                </label>
                                <select 
                                    id="size-select" 
                                    name="size" 
                                    class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    {sizeOptions.map((size) => (
                                        <option value={size}>{size}</option>
                                    ))}
                                </select>
                            </div>
                        </>
                    ) : (
                        <div>
                            <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                Select Size:
                            </label>
                            <select 
                                id="size-select" 
                                name="size" 
                                class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            >
                                {availableSizes.map((size) => (
                                    <option value={priceIds[size]} selected={size === defaultSize}>{size}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={priceIds[defaultSize]}
                        data-is-color-size={isColorSizeVariant}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            ) : (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{price || `$${singlePrice}`} w/ free shipping!</p>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-stripe-payment-id={singlePriceId}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            )}
        </div>
    </div>
</div>


<script>
    const buyButton = document.getElementById("buy-button");
    const sizeSelect = document.getElementById("size-select") as HTMLSelectElement;
    const isColorSize = buyButton?.dataset?.isColorSize === "true";
    
    let stripe: any = null;
    let stripeLoadError = false;
    const isDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';

    // Only load Stripe in production
    if (!isDev) {
        const { loadStripe } = await import("@stripe/stripe-js");
        
        // Initialize Stripe if configuration is available
        if (buyButton?.dataset?.stripeKey && buyButton?.dataset?.stripePaymentId) {
            const stripeKey = buyButton.dataset.stripeKey;
            try {
                stripe = await loadStripe(stripeKey);
                if (!stripe) {
                    console.error("Failed to initialize Stripe.");
                    stripeLoadError = true;
                }
            } catch (error) {
                console.error("Error loading Stripe:", error);
                stripeLoadError = true;
            }
        } else {
            console.error("Missing required Stripe configuration");
            stripeLoadError = true;
        }
    } else {
        console.log("Stripe disabled in development mode");
        stripeLoadError = true;
    }

    // For color/size variants, find the price ID based on selection
    const getPriceId = () => {
        if (isColorSize && sizeSelect) {
            const activeOrb = document.querySelector('.color-orb.active');
            const color = activeOrb?.getAttribute('data-color') || '';
            const size = sizeSelect.value;
            const key = `${color} - ${size}`;
            // Get price IDs from the page's script data
            const priceData = (window as any).priceIds || {};
            return priceData[key] || buyButton?.dataset?.stripePaymentId;
        }
        return sizeSelect ? sizeSelect.value : buyButton?.dataset?.stripePaymentId;
    };

    // Initialize carousel functionality
    function initializeCarousel() {
        const carousel = document.querySelector('.carousel');
        const items = carousel?.querySelectorAll('.carousel-item');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        if (carousel && items && prevBtn && nextBtn) {
            let currentIndex = 1;
            const maxIndex = items.length;

            // Hide navigation buttons if there's only one image
            if (maxIndex <= 1) {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            } else {
                prevBtn.style.display = '';
                nextBtn.style.display = '';
            }

            function showImage(index: number) {
                items.forEach((item) => {
                    item.classList.add('hidden');
                });
                const targetItem = carousel.querySelector(`[data-index="${index}"]`);
                if (targetItem) {
                    targetItem.classList.remove('hidden');
                }
            }

            function nextImage() {
                currentIndex = currentIndex === maxIndex ? 1 : currentIndex + 1;
                showImage(currentIndex);
            }

            function prevImage() {
                currentIndex = currentIndex === 1 ? maxIndex : currentIndex - 1;
                showImage(currentIndex);
            }

            // Remove existing listeners before adding new ones
            const newPrevBtn = prevBtn.cloneNode(true);
            const newNextBtn = nextBtn.cloneNode(true);
            prevBtn.parentNode?.replaceChild(newPrevBtn, prevBtn);
            nextBtn.parentNode?.replaceChild(newNextBtn, nextBtn);

            // Add click event listeners to the buttons
            newNextBtn.addEventListener('click', (e) => {
                e.preventDefault();
                nextImage();
            });
            
            newPrevBtn.addEventListener('click', (e) => {
                e.preventDefault();
                prevImage();
            });
        }
    }

    // Handle color selection changes
    function setupColorImageSwitching() {
        const colorOrbs = document.querySelectorAll('.color-orb');
        let currentColor = colorOrbs[0]?.getAttribute('data-color') || '';
        
        if (colorOrbs.length > 0 && (window as any).colorImages) {
            colorOrbs.forEach(orb => {
                orb.addEventListener('click', () => {
                    const selectedColor = orb.getAttribute('data-color') || '';
                    if (selectedColor === currentColor) return;
                    
                    // Update active state
                    colorOrbs.forEach(o => o.classList.remove('active'));
                    orb.classList.add('active');
                    currentColor = selectedColor;
                    
                    const colorImagesData = (window as any).colorImages[selectedColor];
                    
                    if (colorImagesData) {
                        const carousel = document.querySelector('.carousel');
                        const existingImages = carousel?.querySelectorAll('.carousel-item');
                        
                        if (carousel && existingImages) {
                            // Fade out current images
                            existingImages.forEach(img => {
                                img.classList.add('opacity-0', 'transition-opacity', 'duration-200');
                            });
                            
                            setTimeout(() => {
                                // Remove existing images
                                existingImages.forEach(img => img.remove());
                                
                                // Add new images for the selected color
                                colorImagesData.forEach((image: any, index: number) => {
                                    const img = document.createElement('img');
                                    img.src = image.src;
                                    img.alt = image.alt;
                                    img.loading = index === 0 ? "eager" : "lazy";
                                    img.className = `w-full h-full object-cover carousel-item select-none opacity-0 transition-opacity duration-200 ${index === 0 ? '' : 'hidden'}`;
                                    img.setAttribute('data-index', (index + 1).toString());
                                    carousel.appendChild(img);
                                    
                                    // Fade in new images
                                    setTimeout(() => {
                                        img.classList.remove('opacity-0');
                                    }, 50);
                                });
                                
                                // Reset carousel counter
                                const counter = carousel.parentElement?.querySelector('.carousel-counter');
                                if (counter) {
                                    counter.textContent = `1 / ${colorImagesData.length}`;
                                }
                                
                                // Reinitialize carousel functionality
                                initializeCarousel();
                            }, 200);
                        }
                    }
                });
            });
        }
    }

    // Setup color switching after DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupColorImageSwitching);
    } else {
        setupColorImageSwitching();
    }

    // Only add click handler if buy button exists
    if (buyButton) {
        buyButton.addEventListener("click", () => {
            if (isDev) {
                alert("Stripe checkout is disabled in development mode.");
                return;
            }
            
            if (stripeLoadError || !stripe) {
                alert("Payment system is currently unavailable. Please try again later.");
                return;
            }

            const priceId = getPriceId();

            stripe.redirectToCheckout({
                lineItems: [{ price: priceId, quantity: 1 }],
                mode: "payment",
                successUrl: "https://varietygiftsunlimited.com/success",
                cancelUrl: "https://varietygiftsunlimited.com/",
                shippingAddressCollection: {
                    allowedCountries: [],
                },
            })
            .then(function (result: any) {
                if (result.error) {
                    alert(result.error.message);
                }
            });
        });
    }
</script>

<style>
    .color-orb {
        position: relative;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: none;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        transform: scale(1);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }
    
    .color-orb:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .color-orb:active {
        transform: scale(0.95);
    }
    
    .color-orb.active {
        transform: scale(1.1);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2), 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .color-orb.active::after {
        content: '✓';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 20px;
        font-weight: bold;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }
    
    .color-orb.active[data-color="Natural"]::after,
    .color-orb.active[data-color="White"]::after,
    .color-orb.active[data-color="Yellow"]::after,
    .color-orb.active[data-color="Tan"]::after {
        color: #374151;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .color-name {
        position: absolute;
        bottom: -24px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
        color: #6b7280;
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
        pointer-events: none;
    }
    
    .color-orb:hover .color-name {
        opacity: 1;
    }
    
    .orb-border {
        position: absolute;
        inset: 0;
        border-radius: 50%;
        border: 1px solid rgba(0, 0, 0, 0.1);
        pointer-events: none;
    }
    
    /* Ripple effect on click */
    @keyframes ripple {
        0% {
            transform: scale(0);
            opacity: 0.8;
        }
        100% {
            transform: scale(4);
            opacity: 0;
        }
    }
    
    .color-orb::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.5);
        transform: translate(-50%, -50%);
    }
    
    .color-orb:active::before {
        width: 100%;
        height: 100%;
        animation: ripple 0.6s ease-out;
    }
</style> 