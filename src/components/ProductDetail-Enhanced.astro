---
import ImageCarousel from './ImageCarousel.astro';
import { StripeProductManager } from '../data/products';

// Accept either legacy product props or just the product ID for modern usage
const { 
  productId, 
  title, 
  description, 
  priceIds, 
  singlePrice, 
  singlePriceId, 
  images, 
  colorImages, 
  price 
} = Astro.props;

// Use new abstraction if productId is provided, otherwise use legacy props
let productConfig, displayTitle, displayDescription, displayPrice, displayImages;
let variants: { sizes?: string[]; colors?: string[] } = { sizes: [], colors: [] };
let isColorSizeVariant = false;

if (productId) {
  // Modern usage with productId
  productConfig = StripeProductManager.getProduct(productId);
  if (!productConfig) {
    throw new Error(`Product with ID ${productId} not found`);
  }
  
  displayTitle = productConfig.name;
  displayDescription = productConfig.description;
  displayPrice = productConfig.displayPrice;
  displayImages = productConfig.images;
  variants = productConfig.variants;
  isColorSizeVariant = productConfig.colorImages && Object.keys(productConfig.colorImages).length > 0;
} else {
  // Legacy usage with individual props
  displayTitle = title;
  displayDescription = description;
  displayPrice = price;
  displayImages = images;
  isColorSizeVariant = colorImages && Object.keys(colorImages).length > 0;
  
  if (priceIds) {
    const availableSizes = Object.keys(priceIds);
    if (isColorSizeVariant) {
      const colorOptions = Object.keys(colorImages);
      const sizeOptions = [...new Set(availableSizes.map(s => s.split(' - ')[1]))];
      variants = { sizes: sizeOptions, colors: colorOptions };
    } else {
      variants = { sizes: availableSizes, colors: [] };
    }
  }
}

const colorOptions = variants.colors || [];
const sizeOptions = variants.sizes || [];
const hasVariants = colorOptions.length > 0 || sizeOptions.length > 0;

// For display, use color variant images if available
const imageToDisplay = isColorSizeVariant && colorOptions.length > 0 
  ? (productConfig?.colorImages?.[colorOptions[0]] || colorImages?.[colorOptions[0]] || displayImages)
  : displayImages;

// Get the API key from environment variables
const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
---

<div class="max-w-6xl mx-auto px-4 py-8">
    <button onclick="history.back()" class="inline-block mb-6 text-gray-600 hover:text-gray-900 transition-colors">
        <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
        </span>
    </button>
    <div class="grid md:grid-cols-2 gap-8">
        <ImageCarousel images={imageToDisplay} title={displayTitle} />
        <div class="flex flex-col gap-4">
            <h1 class="text-3xl font-bold">{displayTitle}</h1>
            <p class="text-gray-600">{displayDescription}</p>

            {hasVariants ? (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{displayPrice} w/ free shipping!</p>
                    
                    {isColorSizeVariant ? (
                        <>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-3">
                                    Select Color:
                                </label>
                                <div class="flex gap-3 flex-wrap">
                                    {colorOptions.map((color, index) => {
                                        const colorMap = {
                                            'Green': '#22c55e',
                                            'Pink': '#ec4899',
                                            'Natural': '#f5f5dc',
                                            'Yellow': '#fbbf24',
                                            'Blue': '#3b82f6',
                                            'Purple': '#a855f7',
                                            'Red': '#ef4444',
                                            'Black': '#000000',
                                            'White': '#ffffff',
                                            'Gray': '#6b7280',
                                            'Orange': '#f97316'
                                        };
                                        const bgColor = colorMap[color] || '#e5e7eb';
                                        const isLight = color === 'Natural' || color === 'White' || color === 'Yellow';
                                        return (
                                            <button
                                                type="button"
                                                data-color={color}
                                                class={`color-orb ${index === 0 ? 'active' : ''}`}
                                                style={`background-color: ${bgColor};`}
                                                aria-label={`Select ${color} color`}
                                            >
                                                <span class="color-name">{color}</span>
                                                {isLight && <span class="orb-border"></span>}
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>
                            <div>
                                <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                    Select Size:
                                </label>
                                <select 
                                    id="size-select" 
                                    name="size" 
                                    class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    {sizeOptions.map((size) => (
                                        <option value={size}>{size}</option>
                                    ))}
                                </select>
                            </div>
                        </>
                    ) : (
                        <div>
                            <label for="size-select" class="block text-sm font-medium text-gray-700 mb-2">
                                Select Size:
                            </label>
                            <select 
                                id="size-select" 
                                name="size" 
                                class="block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            >
                                {sizeOptions.map((size) => (
                                    <option value={size}>{size}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-product-id={productId}
                        data-is-color-size={isColorSizeVariant}
                        data-has-variants={true}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            ) : (
                <div class="space-y-4">
                    <p class="text-xl font-semibold">{displayPrice} w/ free shipping!</p>
                    <button 
                        id="buy-button"
                        data-stripe-key={PUBLIC_STRIPE_KEY}
                        data-product-id={productId}
                        data-stripe-payment-id={singlePriceId || (productConfig && Object.values(productConfig.priceMatrix)[0])}
                        data-has-variants={false}
                        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        Buy Now
                    </button>
                    <p class="text-sm text-center text-gray-500">Powered by Stripe</p>
                </div>
            )}
        </div>
    </div>
</div>

<!-- Product data for client-side usage -->
{productId && (
    <script is:inline define:vars={{ 
        productData: productConfig ? {
            [productId]: {
                images: productConfig.images,
                colorImages: productConfig.colorImages,
                priceMatrix: productConfig.priceMatrix
            }
        } : {}
    }}>
        window.productManagerData = productData;
    </script>
)}

<script src="/src/scripts/product-detail.ts"></script>

<style>
.color-orb {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: 3px solid transparent;
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.color-orb:hover {
    transform: scale(1.1);
    border-color: #4f46e5;
}

.color-orb.active {
    border-color: #4f46e5;
    box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

.color-name {
    font-size: 10px;
    font-weight: bold;
    color: rgba(255, 255, 255, 0.9);
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    text-align: center;
    line-height: 1;
}

.orb-border {
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    border: 1px solid #ccc;
    border-radius: 50%;
    pointer-events: none;
}
</style>