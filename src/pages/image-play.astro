<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flux Concept Visualizer</title>
    <style>
      html, body {
            height: 100%;
      }
        :root {
            --neon-blue: #00f3ff;
            --matrix-green: #00ff88;
            --cyber-purple: #bc13fe;
            --dark-bg: #0a0a0f;
        }

        body {
            background: var(--dark-bg);
            color: white;
            font-family: 'Courier New', monospace;
            padding: 20px;
        }

        #controls {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
        }

        #conceptInput {
            flex-grow: 1;
            padding: 12px;
            background: #1a1a2f;
            border: 2px solid var(--neon-blue);
            color: white;
            font-size: 16px;
            box-shadow: 0 0 15px var(--neon-blue);
        }

        #generateBtn {
            padding: 12px 25px;
            background: linear-gradient(45deg, #00ff88, #00f3ff);
            border: none;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            position: relative;
            overflow: hidden;
            transition: 0.3s;
        }

        #generateBtn:hover {
            box-shadow: 0 0 25px var(--matrix-green);
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .card {
            background: #151520;
            border: 2px solid #2a2a4f;
            border-radius: 8px;
            padding: 15px;
            transition: 0.3s;
        }

        .card.active {
            border-color: var(--neon-blue);
            box-shadow: 0 0 25px var(--neon-blue);
        }

        .card-img {
            width: 100%;
            height: 200px;
            background: #0a0a1a;
            margin-bottom: 15px;
        }

        .prompt-input {
            width: 100%;
            height: 100px;
            background: #1a1a2f;
            border: 1px solid #3a3a6f;
            color: white;
            padding: 8px;
            resize: vertical;
        }

        .glow {
            animation: glow-pulse 2s infinite;
        }

        @keyframes glow-pulse {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 0.4; }
        }
    </style>
</head>
<body>
        <input type="text" id="conceptInput" placeholder="Enter video concept...">
        <button id="generateBtn">✨ Generate✨</button>
    </div>
    <div class="grid" id="cardGrid"></div>

    <script>
        const FAL_KEY = 'afaf3bcc-8418-40c5-aa00-426896690522:b3357032fb9f886f2e114a86a18da89d'; // Replace with your actual key
        const MODEL_ID = 'fal-ai/flux-lora';

        async function generateImage(prompt) {
            const response = await fetch(`https://queue.fal.run/${MODEL_ID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Key ${FAL_KEY}`
                },
                body: JSON.stringify({
                    loras: [{
                        path: "https://huggingface.co/XLabs-AI/flux-lora-collection/resolve/main/scenery_lora.safetensors?download=true"
                    }],
                    prompt: `scenery style ${prompt}`,
                    image_size: "portrait_16_9",
                    num_images: 1,
                    output_format: "jpeg",
                    guidance_scale: 3.5,
                    num_inference_steps: 28,
                    enable_safety_checker: true
                })
            });
            const data = await response.json();
            return await waitForImage(data.request_id);
        }

        async function waitForImage(requestId) {
            let status;
            do {
                await new Promise(resolve => setTimeout(resolve, 3000)); // Wait 3 seconds before checking again
                const statusResponse = await fetch(`https://queue.fal.run/${MODEL_ID}/requests/${requestId}/status`, {
                    headers: { 'Authorization': `Key ${FAL_KEY}` }
                });
                status = await statusResponse.json();
            } while (status.status !== 'COMPLETED');
            
            const resultResponse = await fetch(`https://queue.fal.run/${MODEL_ID}/requests/${requestId}`, {
                headers: { 'Authorization': `Key ${FAL_KEY}` }
            });
            return await resultResponse.json();
        }

        function createCard(prompt) {
            const card = document.createElement('div');
            card.className = 'card';
            
            const img = document.createElement('img');
            img.className = 'card-img glow';
            
            const textarea = document.createElement('textarea');
            textarea.className = 'prompt-input';
            textarea.value = prompt;
            
            card.appendChild(img);
            card.appendChild(textarea);
            
            card.addEventListener('click', () => {
                card.classList.toggle('active');
            });
            
            img.src = "https://placecats.com/300/200"
            
            /*
            generateImage(prompt).then(data => {
                img.style.backgroundImage = `url(${data.images[0].url})`;
                img.classList.remove('glow');
            });
            */
            
            return card;
        }

          async function generatePrompts(concept) {
              return ["white room", "black room", "red"]
              /*
            const apiKey = "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"; // Replace with your actual API key
            const endpoint = "https://api.openai.com/v1/chat/completions";

            const prompt = `Generate 10 distinct and concise mini-prompts related to the concept: "${concept}". 
              Each mini-prompt should be numbered and separated by a newline.`;

            try {
              const response = await fetch(endpoint, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                  model: "gpt-4",
                  messages: [{ role: "user", content: prompt }],
                  temperature: 0.7
                })
              });

              console.log(response)

              if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

              const data = await response.json();
              const responseText = data.choices[0]?.message?.content || "";

              // Split response into an array of 10 mini-prompts
              const miniPrompts = responseText.split("\n").filter(line => line.trim() !== "").slice(0, 10);

              return miniPrompts;
            } catch (error) {
              console.error("Error generating prompts:", error);
              return [];
            }
              */
        }

        async function generateAllCards(concept) {
          const grid = document.getElementById('cardGrid');

          // Collect current prompts from displayed text areas
          const promptInputs = document.querySelectorAll('.prompt-input');
          let prompts = Array.from(promptInputs).map(input => input.value);

          console.log(prompts)
          grid.innerHTML = '';

          // If no prompts are present (e.g., grid is empty), generate new prompts
          if (prompts.length === 0) {
            prompts = await generatePrompts(concept);
          }

          prompts.forEach(prompt => {
            grid.appendChild(createCard(prompt));
          });
        }

        document.getElementById('generateBtn').addEventListener('click', () => {
          const concept = document.getElementById('conceptInput').value;

          generateAllCards(concept);
        });
        
        generateAllCards('boo')
    </script>
</body>
</html>