<head>
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
  />

  <script src="/a-frame/aframe-master.min.js" is:inline></script>
  <script src="https://cdn.jsdelivr.net/gh/c-frame/aframe-extras@7.5.1/dist/aframe-extras.min.js"></script>
      <script src="https://unpkg.com/aframe-event-set-component@4.2.1/dist/aframe-event-set-component.min.js"></script>



  <script>
    if (!window.isSecureContext) {
      alert("WebXR needs HTTPS");
    }
  </script>

  <!-- Import the client script as a module -->
  <script data-ts-nocheck>

    import { initializeChat } from "../scripts/chat.js";

    if (typeof window !== 'undefined') {
      window.AFRAME = AFRAME;
    }
    
    // Add this before the window.addEventListener('load') code
    AFRAME.registerComponent("animation-logger", {
      init: function () {
        this.el.addEventListener("model-loaded", (e) => {
          const model = this.el.getObject3D("mesh");
          const animations = model.animations;
          console.log("Available animations:", animations);
          animations.forEach((clip, index) => {
            console.log(`Animation ${index}: ${clip.name}`);
          });
        });
      },
    });

    // Add this component to manage animations
    AFRAME.registerComponent("robot-animation-controller", {
      init: function () {
        this.el.addEventListener("model-loaded", () => {
          console.log("Model loaded, setting initial animation to Idle");
          /*
          this.el.setAttribute('animation-mixer', {
            clip: 'Idle',
            loop: 'repeat',
            timeScale: 10  // Speed up animation 10x
          });
          */
        });

        // Listen for pause toggle events
        window.addEventListener("togglePause", (event) => {
          const isPaused = event.detail.isPaused;
          /*
          this.el.setAttribute('animation-mixer', {
            clip: isPaused ? 'Idle' : 'Standing',
            loop: 'repeat',
            timeScale: 10  // Speed up animation 10x
          });
          */
        });
      },
    });

    // Initialize chat when the page loads
    window.addEventListener("load", async () => {
      console.log("Page loaded, initializing chat...");

      try {
        const client = await initializeChat();
        console.log("Chat initialized");

        // Get reference to elements
        const robotText = document.querySelector("a-text");
        const pauseButton = document.querySelector("#pauseButton");
        console.log("Robot text element:", robotText);

        // Handle pause button clicks
        pauseButton.addEventListener("click", () => {
          const isPaused = pauseButton.getAttribute("data-paused") === "true";
          pauseButton.setAttribute("data-paused", !isPaused);
          pauseButton.textContent = isPaused ? "PAUSE" : "RESUME";

          // Dispatch pause state change event
          window.dispatchEvent(
            new CustomEvent("togglePause", {
              detail: { isPaused: !isPaused },
            }),
          );

          // Update robot text
          robotText.setAttribute("value", isPaused ? "LISTENING" : "PAUSED");
        });

        // Listen for assistant responses
        window.addEventListener("assistantResponse", (event) => {
          console.log("Received assistant response:", event.detail.text);
          robotText.setAttribute("value", event.detail.text);
        });
      } catch (error) {
        console.error("Error initializing chat:", error);
      }
    });
  </script>

</head>

<style>
  body {
    padding: 40px !important;
  }
  .pause-button {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 1000;
    padding: 10px 20px;
    background-color: #4cc3d9;
    border: none;
    border-radius: 5px;
    color: black;
    font-weight: bold;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }

  .pause-button:hover {
    background-color: #3aa3b9;
  }
</style>

<!-- Add the HTML button before the a-scene -->
<button id="pauseButton" class="pause-button" data-paused="true">PAUSE</button>

<div>
  <a-scene
   style="z-index: 1;"
  xr-mode-ui="enterARButton: #myEnterARButton; XRMode: xr;">
    <!-- Style the button with images and/or custom CSS. -->
      <button 
        id="myEnterARButton" 
        type="button"
          style="
          color: red;
    z-index: 100000000000;
    left: 400px;
    position: absolute; /* Add this */
    cursor: pointer;    /* Add this */
  "
      >
        vr
      </button>
    <!-- Add assets management system -->
    <a-assets>
      <a-asset-item id="robot" src="/a-frame/robot.gltf"></a-asset-item>
    </a-assets>

    <!--
    <a-sky color="#87CEEB"></a-sky>
    <a-plane
      position="0 0 0"
      rotation="-90 0 0"
      width="30"
      height="30"
      color="#8B4513"
      shadow="receive: true"></a-plane>
 -->

       <a-entity position=".1 0 1.8"
       rotation="0 180 0"
                animation-mixer="clip: Idle;"
                scale="0.3 0.3 0.3"
                gltf-model="src: url(/a-frame/robot.gltf);">

      <a-entity position="0 5.5 0" >
        <a-text
          value="Initializing..."
          scale="2 2 2"
          color="#000000"
          align="center"
          side="double"
          billboard></a-text>
      </a-entity>
      </a-entity>

    <a-entity position="0 0 0">
      <a-camera id="camera"></a-camera>
    </a-entity>

    <a-entity
      id="rightHand"
      hand-tracking-grab-controls="hand: right"
      coffee-spawner="targetElementSelector: [data-world-mesh=table]"
    ></a-entity>
    <a-entity
      id="leftHand"
      hand-tracking-grab-controls="hand: left"
      coffee-spawner="targetElementSelector: [data-world-mesh=table]"
    ></a-entity>
  </a-scene>
</div>
