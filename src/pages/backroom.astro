---
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="Backroom Utility - Variety Gifts Unlimited"
  hideHeader={false}
  hideFooter={false}
>
  <main class="w-full overflow-x-hidden relative">
    <section class="backroom-section relative py-8 px-4 sm:py-12 sm:px-6 md:px-12 lg:px-24 bg-gradient-to-br from-amber-900 via-orange-900 to-red-900 min-h-screen">
      <div class="max-w-6xl mx-auto relative z-10">
        <div class="text-center mb-8 sm:mb-12">
          <h1 class="text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-bold mb-4 text-amber-100 drop-shadow-lg">
            🍂 Backroom Utility 🍁
          </h1>
          <p class="text-amber-200 text-base sm:text-lg drop-shadow-md">
            Cozy AI Image Generation Tool
          </p>
        </div>

        <div class="bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 rounded-2xl p-4 sm:p-6 md:p-8 shadow-2xl border-4 border-amber-200/50 backdrop-blur-sm">
          <!-- API Key Section -->
          <div class="mb-6 sm:mb-8">
            <label for="apiKey" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
              🎃 Fal API Key
            </label>
             <input
               type="password"
               id="apiKey"
               class="w-full p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 focus:border-orange-500 focus:outline-none shadow-lg placeholder-amber-600 text-sm sm:text-base"
               placeholder="Enter your Fal API key..."
             />
          </div>

          <!-- Model Selection -->
          <div class="mb-6">
            <label for="model" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
              🎨 Model
            </label>
             <select
               id="model"
               class="w-full p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 focus:border-orange-500 focus:outline-none shadow-lg text-sm sm:text-base"
             >
               <option value="fal-ai/nano-banana/edit">🍌 nano banana</option>
               <option value="fal-ai/bytedance/seedream/v4/edit">🌟 seedream v4 edit</option>
             </select>
          </div>

            <!-- Reference Images -->
            <div class="mb-6">
              <label for="referenceImages" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
                🖼️ Reference Images (Required)
              </label>
              <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-3 sm:gap-4">
                <input
                  type="file"
                  id="referenceImages"
                  multiple
                  accept="image/*"
                  class="flex-shrink-0 file:mr-3 sm:file:mr-4 file:py-2 file:px-3 sm:file:px-4 file:rounded-lg file:border-0 file:text-xs sm:file:text-sm file:font-semibold file:bg-amber-200 file:text-amber-900 hover:file:bg-amber-300 w-full sm:w-auto"
                />
                <div class="paste-area flex-1 p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 shadow-lg text-center text-sm sm:text-base">
                  📎 Or paste images from clipboard here
                </div>
              </div>
              <p class="text-amber-700 text-xs sm:text-sm mt-2 drop-shadow-sm">
                Upload 1-4 reference images for editing, or paste images from clipboard. Both models require reference images. 🌟
              </p>
            <!-- Reference Images Preview -->
            <div id="referencePreview" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4 mt-4">
              <!-- Reference images will be displayed here -->
            </div>
          </div>

          <!-- Prompt Input -->
          <div class="mb-6">
            <label for="prompt" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
              ✨ Prompt
            </label>
             <textarea
               id="prompt"
               rows="3"
               class="w-full p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 focus:border-orange-500 focus:outline-none resize-none shadow-lg placeholder-amber-600 text-sm sm:text-base"
               placeholder="Describe how to edit the reference images... (e.g., 'add a buff dog wearing the tank top')"
             ></textarea>
          </div>

           <!-- Image Count -->
           <div class="mb-6">
             <label for="imageCount" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
               🎃 Number of Images (1-4)
             </label>
             <select
               id="imageCount"
               class="w-full p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 focus:border-orange-500 focus:outline-none shadow-lg text-sm sm:text-base"
             >
               <option value="1">🍁 1 Image</option>
               <option value="2">🍂 2 Images</option>
               <option value="3">🌰 3 Images</option>
               <option value="4">🎃 4 Images</option>
             </select>
           </div>

           <!-- Aspect Ratio -->
           <div class="mb-6 sm:mb-8">
             <label for="aspectRatio" class="block text-amber-900 text-base sm:text-lg font-semibold mb-2 drop-shadow-sm">
               📐 Aspect Ratio
             </label>
             <select
               id="aspectRatio"
               class="w-full p-3 sm:p-4 rounded-xl bg-gradient-to-r from-amber-100 to-orange-100 text-amber-900 border-2 border-amber-300 focus:border-orange-500 focus:outline-none shadow-lg text-sm sm:text-base"
             >
               <option value="16:9">📺 16:9 (Landscape)</option>
               <option value="4:3">📷 4:3 (Standard)</option>
               <option value="1:1">🎯 1:1 (Square)</option>
               <option value="3:4">📱 3:4 (Portrait)</option>
               <option value="9:16">📱 9:16 (Vertical)</option>
             </select>
           </div>

          <!-- Generate Button -->
          <div class="text-center mb-6 sm:mb-8">
            <button
              id="generateBtn"
              class="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 text-white font-bold py-3 px-6 sm:py-4 sm:px-10 rounded-2xl transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-xl transform hover:scale-105 text-sm sm:text-base"
            >
              🎨 Generate Cozy Images ✨
            </button>
          </div>

          <!-- Status Message -->
          <div id="status" class="text-center mb-4 sm:mb-6 text-amber-900 font-semibold drop-shadow-sm text-sm sm:text-base"></div>

          <!-- Generated Images -->
          <div id="imagesContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-6 sm:mb-8">
            <!-- Images will be inserted here -->
          </div>

          <!-- Image History -->
          <div class="border-t-4 border-amber-300 pt-4 sm:pt-6">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-3 sm:gap-0">
              <h3 class="text-amber-900 text-lg sm:text-xl font-semibold drop-shadow-sm">🍁 Recent Cozy Creations</h3>
              <button
                id="clearHistoryBtn"
                class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white py-2 px-4 sm:px-6 rounded-xl transition duration-300 shadow-lg transform hover:scale-105 text-sm sm:text-base w-full sm:w-auto"
              >
                🗑️ Clear History
              </button>
            </div>
            <div id="historyContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 sm:gap-4">
              <!-- History images will be inserted here -->
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  .backroom-section {
    min-height: 80vh;
    display: flex;
    align-items: flex-start;
    position: relative;
    overflow: hidden;
  }

  .backroom-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image:
      radial-gradient(circle at 20% 80%, rgba(251, 191, 36, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(234, 88, 12, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 40% 40%, rgba(220, 38, 38, 0.05) 0%, transparent 50%);
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .backroom-section {
      min-height: auto;
      padding-top: 6rem;
    }
  }

  .generated-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    border: 3px solid rgba(251, 191, 36, 0.3);
  }

  @media (min-width: 640px) {
    .generated-image {
      height: 256px;
      border-radius: 16px;
    }
  }

  .generated-image:hover {
    transform: scale(1.05) rotate(1deg);
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.3);
    border-color: rgba(251, 191, 36, 0.6);
  }

  .history-image {
    width: 100%;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    border: 2px solid rgba(251, 191, 36, 0.2);
  }

  @media (min-width: 640px) {
    .history-image {
      height: 128px;
      border-radius: 12px;
    }
  }

  .history-image:hover {
    opacity: 0.9;
    transform: scale(1.05);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
    border-color: rgba(251, 191, 36, 0.4);
  }

  /* Add some autumnal sparkle */
  @keyframes twinkle {
    0%, 100% { opacity: 0.3; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.2); }
  }

  @media (min-width: 640px) {
    .backroom-section::after {
      content: '🍂';
      position: absolute;
      top: 10%;
      left: 10%;
      font-size: 2rem;
      animation: twinkle 3s ease-in-out infinite;
      pointer-events: none;
    }

    .backroom-section::after:nth-child(2) {
      content: '🎃';
      top: 20%;
      right: 15%;
      animation-delay: 1s;
    }

    .backroom-section::after:nth-child(3) {
      content: '🍁';
      bottom: 15%;
      left: 20%;
      animation-delay: 2s;
    }
  }
</style>

<script>
  interface GeneratedImage {
    url: string;
    prompt: string;
    model: string;
    timestamp: number;
  }

   // Load API key from localStorage
   const apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;
   const savedApiKey = localStorage.getItem('falApiKey');
   if (savedApiKey) {
     apiKeyInput.value = savedApiKey;
   }

   // Save API key to localStorage on input
   apiKeyInput.addEventListener('input', () => {
     localStorage.setItem('falApiKey', apiKeyInput.value);
   });

   // Load model from localStorage
   const modelSelect = document.getElementById('model') as HTMLSelectElement;
   const savedModel = localStorage.getItem('selectedModel');
   if (savedModel) {
     modelSelect.value = savedModel;
   }

   // Handle model change to disable aspect ratio for nano banana and save to localStorage
   const aspectRatioSelect = document.getElementById('aspectRatio') as HTMLSelectElement;

   const updateAspectRatioAvailability = () => {
     if (modelSelect.value === 'fal-ai/nano-banana/edit') {
       aspectRatioSelect.disabled = true;
       aspectRatioSelect.value = '1:1'; // Set default when disabled
     } else {
       aspectRatioSelect.disabled = false;
     }
   };

   const handleModelChange = () => {
     localStorage.setItem('selectedModel', modelSelect.value);
     updateAspectRatioAvailability();
   };

   modelSelect.addEventListener('change', handleModelChange);

   // Set initial state
   updateAspectRatioAvailability();

   // Reference images state
  let referenceImages: File[] = [];

  // Load image history from localStorage
  const loadImageHistory = (): GeneratedImage[] => {
    const history = localStorage.getItem('imageHistory');
    return history ? JSON.parse(history) : [];
  };

  // Save image history to localStorage
  const saveImageHistory = (history: GeneratedImage[]) => {
    // Keep only the last 10 images
    const limitedHistory = history.slice(-10);
    localStorage.setItem('imageHistory', JSON.stringify(limitedHistory));
  };

  // Display image history
  const displayImageHistory = () => {
    const history = loadImageHistory();
    const historyContainer = document.getElementById('historyContainer')!;
    historyContainer.innerHTML = '';

    history.reverse().forEach((image) => {
      const imgElement = document.createElement('img');
      imgElement.src = image.url;
      imgElement.className = 'history-image';
      imgElement.title = image.prompt;
      imgElement.addEventListener('click', () => {
        // Copy prompt to input when clicked
        const promptInput = document.getElementById('prompt') as HTMLTextAreaElement;
        promptInput.value = image.prompt;

        // Set model
        const modelSelect = document.getElementById('model') as HTMLSelectElement;
        modelSelect.value = image.model;
      });
      historyContainer.appendChild(imgElement);
    });
  };

  // Handle reference image selection
  const handleReferenceImageSelect = (event: Event) => {
    const files = (event.target as HTMLInputElement).files;
    if (!files) return;

    // Limit to 4 images
    const selectedFiles = Array.from(files).slice(0, 4);
    referenceImages = selectedFiles;
    displayReferenceImages();
  };

  // Display reference images preview
  const displayReferenceImages = () => {
    const previewContainer = document.getElementById('referencePreview')!;
    previewContainer.innerHTML = '';

      referenceImages.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const imgElement = document.createElement('div');
          imgElement.className = 'relative group';
          imgElement.innerHTML = `
            <img src="${e.target?.result}" class="w-full h-20 sm:h-24 object-cover rounded-lg border-2 border-amber-300 shadow-md" />
            <button class="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-5 h-5 sm:w-6 sm:h-6 flex items-center justify-center text-xs sm:text-sm font-bold shadow-lg opacity-0 group-hover:opacity-100 transition-opacity" onclick="removeReferenceImage(${index})">
              ×
            </button>
          `;
          previewContainer.appendChild(imgElement);
        };
        reader.readAsDataURL(file);
      });
  };

  // Remove reference image
  const removeReferenceImage = (index: number) => {
    referenceImages.splice(index, 1);
    displayReferenceImages();
  };

  // Handle clipboard paste
  const handlePaste = async (event: ClipboardEvent) => {
    const items = event.clipboardData?.items;
    if (!items) return;

    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (item.type.indexOf('image') !== -1) {
        event.preventDefault();

        // Check if we already have 4 images
        if (referenceImages.length >= 4) {
          showStatus('Maximum 4 reference images allowed', 'error');
          return;
        }

        const blob = item.getAsFile();
        if (blob) {
          // Create a File object with a generic name
          const file = new File([blob], `pasted-image-${Date.now()}.png`, { type: blob.type });
          referenceImages.push(file);
          displayReferenceImages();
          showStatus('Image pasted from clipboard! 🎨', 'success');
        }
        break; // Only handle the first image found
      }
    }
  };

  // Convert file to base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // Calculate image dimensions based on aspect ratio
  const getImageDimensions = (aspectRatio: string): { width: number; height: number } => {
    const [widthRatio, heightRatio] = aspectRatio.split(':').map(Number);
    const baseResolution = 2048; // Base resolution for calculations

    if (widthRatio > heightRatio) {
      // Landscape orientation
      const width = baseResolution;
      const height = Math.round((heightRatio / widthRatio) * baseResolution);
      return { width, height };
    } else if (heightRatio > widthRatio) {
      // Portrait orientation
      const height = baseResolution;
      const width = Math.round((widthRatio / heightRatio) * baseResolution);
      return { width, height };
    } else {
      // Square
      return { width: baseResolution, height: baseResolution };
    }
  };

  // Generate images using Fal API
  const generateImages = async () => {
    const apiKey = apiKeyInput.value.trim();
    if (!apiKey) {
      showStatus('Please enter your Fal API key', 'error');
      return;
    }

    const model = (document.getElementById('model') as HTMLSelectElement).value;
    const prompt = (document.getElementById('prompt') as HTMLTextAreaElement).value.trim();
    if (!prompt) {
      showStatus('Please enter a prompt', 'error');
      return;
    }

    if (referenceImages.length === 0) {
      showStatus('Please upload at least one reference image', 'error');
      return;
    }

    const imageCount = parseInt((document.getElementById('imageCount') as HTMLSelectElement).value);
    const aspectRatio = (document.getElementById('aspectRatio') as HTMLSelectElement).value;

    const generateBtn = document.getElementById('generateBtn') as HTMLButtonElement;
    generateBtn.disabled = true;
    generateBtn.textContent = '🎃 Brewing Magic... 🍁';

    showStatus('Generating images...', 'info');

    try {
      // Prepare request body
      const dimensions = getImageDimensions(aspectRatio);
      const requestBody: any = {
        prompt: prompt,
        image_size: {
          width: dimensions.width,
          height: dimensions.height
        },
        num_images: imageCount,
        max_images: 1,
        enable_safety_checker: true,
      };

      // Add reference images (required for these models)
      const referenceImageUrls = await Promise.all(
        referenceImages.map(file => fileToBase64(file))
      );
      requestBody.image_urls = referenceImageUrls;

      const response = await fetch(`https://fal.run/${model}`, {
        method: 'POST',
        headers: {
          'Authorization': `Key ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }

      const result = await response.json();

      // Display generated images
      displayGeneratedImages(result.images || [result]);

      // Add to history
      const history = loadImageHistory();
      const newImages = (result.images || [result]).map((img: any) => ({
        url: img.url,
        prompt: prompt,
        model: model,
        timestamp: Date.now(),
      }));
      history.push(...newImages);
      saveImageHistory(history);
      displayImageHistory();

      showStatus(`🎉 Successfully brewed ${imageCount} cozy image(s) using ${referenceImages.length} reference image(s)! 🍂`, 'success');
    } catch (error) {
      console.error('Error generating images:', error);
      showStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
    } finally {
    generateBtn.disabled = false;
    generateBtn.textContent = '🎨 Generate Cozy Images ✨';
    }
  };

  // Display generated images
  const displayGeneratedImages = (images: any[]) => {
    const container = document.getElementById('imagesContainer')!;
    container.innerHTML = '';

    images.forEach((image) => {
      const imgElement = document.createElement('img');
      imgElement.src = image.url;
      imgElement.className = 'generated-image';
      imgElement.addEventListener('click', () => {
        // Open image in new tab
        window.open(image.url, '_blank');
      });
      container.appendChild(imgElement);
    });
  };

  // Show status message
  const showStatus = (message: string, type: 'info' | 'success' | 'error') => {
    const statusElement = document.getElementById('status')!;
    statusElement.textContent = message;
    statusElement.className = `text-center mb-6 font-semibold drop-shadow-sm ${
      type === 'error' ? 'text-red-700' :
      type === 'success' ? 'text-green-700' :
      'text-amber-700'
    }`;
  };

  // Clear history
  const clearHistory = () => {
    localStorage.removeItem('imageHistory');
    displayImageHistory();
    showStatus('🧹 History cleared - fresh autumn canvas! 🍁', 'info');
  };

  // Event listeners
  document.getElementById('generateBtn')!.addEventListener('click', generateImages);
  document.getElementById('clearHistoryBtn')!.addEventListener('click', clearHistory);
  document.getElementById('referenceImages')!.addEventListener('change', handleReferenceImageSelect);
  document.querySelector('.paste-area')!.addEventListener('paste', handlePaste);

  // Make remove function globally accessible
  (window as any).removeReferenceImage = removeReferenceImage;

  // Initialize
  displayImageHistory();
</script>